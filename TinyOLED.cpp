/* TinyOLED v0.0.1

   Sebastian Murgul - www.sebastian-murgul.com - 29th June 2022
   
   CC BY 4.0
   Licensed under a Creative Commons Attribution 4.0 International license: 
   http://creativecommons.org/licenses/by/4.0/
*/

#include "TinyOLED.h"
#include "TinyI2CMaster.h"

// OLED init settings
const uint8_t OLED_INIT_CMD[] = {  
  0xA8, 0x1F,       // set multiplex (HEIGHT-1): 0x1F for 128x32, 0x3F for 128x64 
  0x22, 0x00, 0x03, // set min and max page
  0x20, 0x00,       // set horizontal memory addressing mode
  0xDA, 0x02,       // set COM pins hardware configuration to sequential
  0x8D, 0x14,       // enable charge pump
  0xAF,             // switch on OLED
  0xA1, 0xC8        // flip the screen
};

// standard ASCII 5x8 font (adapted from Neven Boyanov and Stephen Denne)
const uint8_t OLED_FONT[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, //   0 
  0x00, 0x00, 0x2f, 0x00, 0x00, // ! 1 
  0x00, 0x07, 0x00, 0x07, 0x00, // " 2 
  0x14, 0x7f, 0x14, 0x7f, 0x14, // # 3 
  0x24, 0x2a, 0x7f, 0x2a, 0x12, // $ 4 
  0x62, 0x64, 0x08, 0x13, 0x23, // % 5 
  0x36, 0x49, 0x55, 0x22, 0x50, // & 6 
  0x00, 0x05, 0x03, 0x00, 0x00, // ' 7 
  0x00, 0x1c, 0x22, 0x41, 0x00, // ( 8 
  0x00, 0x41, 0x22, 0x1c, 0x00, // ) 9 
  0x14, 0x08, 0x3E, 0x08, 0x14, // * 10
  0x08, 0x08, 0x3E, 0x08, 0x08, // + 11
  0x00, 0x00, 0xA0, 0x60, 0x00, // , 12
  0x08, 0x08, 0x08, 0x08, 0x08, // - 13
  0x00, 0x60, 0x60, 0x00, 0x00, // . 14
  0x20, 0x10, 0x08, 0x04, 0x02, // / 15
  0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 16
  0x00, 0x42, 0x7F, 0x40, 0x00, // 1 17
  0x42, 0x61, 0x51, 0x49, 0x46, // 2 18
  0x21, 0x41, 0x45, 0x4B, 0x31, // 3 19
  0x18, 0x14, 0x12, 0x7F, 0x10, // 4 20
  0x27, 0x45, 0x45, 0x45, 0x39, // 5 21
  0x3C, 0x4A, 0x49, 0x49, 0x30, // 6 22
  0x01, 0x71, 0x09, 0x05, 0x03, // 7 23
  0x36, 0x49, 0x49, 0x49, 0x36, // 8 24
  0x06, 0x49, 0x49, 0x29, 0x1E, // 9 25
  0x00, 0x36, 0x36, 0x00, 0x00, // : 26
  0x00, 0x56, 0x36, 0x00, 0x00, // ; 27
  0x08, 0x14, 0x22, 0x41, 0x00, // < 28
  0x14, 0x14, 0x14, 0x14, 0x14, // = 29
  0x00, 0x41, 0x22, 0x14, 0x08, // > 30
  0x02, 0x01, 0x51, 0x09, 0x06, // ? 31
  0x32, 0x49, 0x59, 0x51, 0x3E, // @ 32
  0x7C, 0x12, 0x11, 0x12, 0x7C, // A 33
  0x7F, 0x49, 0x49, 0x49, 0x36, // B 34
  0x3E, 0x41, 0x41, 0x41, 0x22, // C 35
  0x7F, 0x41, 0x41, 0x22, 0x1C, // D 36
  0x7F, 0x49, 0x49, 0x49, 0x41, // E 37
  0x7F, 0x09, 0x09, 0x09, 0x01, // F 38
  0x3E, 0x41, 0x49, 0x49, 0x7A, // G 39
  0x7F, 0x08, 0x08, 0x08, 0x7F, // H 40
  0x00, 0x41, 0x7F, 0x41, 0x00, // I 41
  0x20, 0x40, 0x41, 0x3F, 0x01, // J 42
  0x7F, 0x08, 0x14, 0x22, 0x41, // K 43
  0x7F, 0x40, 0x40, 0x40, 0x40, // L 44
  0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 45
  0x7F, 0x04, 0x08, 0x10, 0x7F, // N 46
  0x3E, 0x41, 0x41, 0x41, 0x3E, // O 47
  0x7F, 0x09, 0x09, 0x09, 0x06, // P 48
  0x3E, 0x41, 0x51, 0x21, 0x5E, // Q 49
  0x7F, 0x09, 0x19, 0x29, 0x46, // R 50
  0x46, 0x49, 0x49, 0x49, 0x31, // S 51
  0x01, 0x01, 0x7F, 0x01, 0x01, // T 52
  0x3F, 0x40, 0x40, 0x40, 0x3F, // U 53
  0x1F, 0x20, 0x40, 0x20, 0x1F, // V 54
  0x3F, 0x40, 0x38, 0x40, 0x3F, // W 55
  0x63, 0x14, 0x08, 0x14, 0x63, // X 56
  0x07, 0x08, 0x70, 0x08, 0x07, // Y 57
  0x61, 0x51, 0x49, 0x45, 0x43, // Z 58
  0x00, 0x7F, 0x41, 0x41, 0x00, // [ 59
  0x02, 0x04, 0x08, 0x10, 0x20, // \ 60
  0x00, 0x41, 0x41, 0x7F, 0x00, // ] 61
  0x04, 0x02, 0x01, 0x02, 0x04, // ^ 62
  0x40, 0x40, 0x40, 0x40, 0x40  // _ 63
};

TinyOLED::TinyOLED() {
  
}

void TinyOLED::init(void) {
  TinyI2C.init();                          // initialize I2C first
  TinyI2C.start(OLED_ADDR, 0);             // start transmission to OLED
  TinyI2C.write(OLED_CMD_MODE);            // set command mode
  for (uint8_t i = 0; i < OLED_INIT_LEN; i++) 
    TinyI2C.write(OLED_INIT_CMD[i]);
  TinyI2C.stop();                          // stop transmission
}

// OLED clear screen
void TinyOLED::clear(void) {  
  TinyI2C.start(OLED_ADDR, 0);             // start transmission to OLED
  TinyI2C.write(OLED_CMD_MODE);            // set command mode
  TinyI2C.write(0x40 | (0 & 0X3F));        // SSD1306_SETSTARTLINE 
  TinyI2C.stop();                          // stop transmission

  for (uint8_t r = 0; r < 32; r++) {
    TinyOLED::cursor(0, r);                // set cursor at upper left corner
    for (uint8_t c = 0; c < 128; c++) {
      TinyI2C.start(OLED_ADDR, 0);         // start transmission to OLED
      TinyI2C.write(OLED_DAT_MODE);        // set data mode
      TinyI2C.write(0x00);                 // clear the screen
      TinyI2C.stop();                      // stop transmission
    }
  }
  
  TinyOLED::shift(0);                      // reset vertical shift
}

// OLED set vertical shift
void TinyOLED::shift(uint8_t ypos) {
  TinyI2C.start(OLED_ADDR, 0);             // start transmission to OLED
  TinyI2C.write(OLED_CMD_MODE);            // set command mode
  TinyI2C.write(0xD3);                     // vertical shift command
  TinyI2C.write(ypos);                     // set vertical shift value
  TinyI2C.stop();                          // stop transmission
}

// OLED print a character
void TinyOLED::printChar(char ch) {
  uint16_t offset = ch - 32;               // calculate position of character in font array
  offset += offset << 2;                   // -> offset = (ch - 32) * 5
  TinyI2C.start(OLED_ADDR, 0);             // start transmission to OLED
  TinyI2C.write(OLED_DAT_MODE);            // set data mode
  TinyI2C.write(0x00);                     // print spacing between characters
  for(uint8_t i=5; i; i--) 
    TinyI2C.write(OLED_FONT[offset++]);    // print character
  TinyI2C.stop();                          // stop transmission
}

// OLED print a string from program memory
void TinyOLED::printStr(const char* p) {
  while(*p) TinyOLED::printChar(*p++);
}

// OLED set the cursor
void TinyOLED::cursor(uint8_t xpos, uint8_t ypos) {
  TinyI2C.start(OLED_ADDR, 0);             // start transmission to OLED
  TinyI2C.write(OLED_CMD_MODE);            // set command mode
  TinyI2C.write(xpos & 0x0F);              // set low nibble of start column
  TinyI2C.write(0x10 | (xpos >> 4));       // set high nibble of start column
  TinyI2C.write(0xB0 | (ypos & 0x07));     // set start page
  TinyI2C.stop();                          // stop transmission
}
